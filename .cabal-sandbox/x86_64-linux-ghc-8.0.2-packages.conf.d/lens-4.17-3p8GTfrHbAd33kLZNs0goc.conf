name: lens
version: 4.17
id: lens-4.17-3p8GTfrHbAd33kLZNs0goc
key: lens-4.17-3p8GTfrHbAd33kLZNs0goc
license: BSD2
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.CTypes
    Control.Lens.Internal.Deque Control.Lens.Internal.Exception
    Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
    Control.Lens.Internal.Fold Control.Lens.Internal.Getter
    Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
    Control.Lens.Internal.Iso Control.Lens.Internal.Level
    Control.Lens.Internal.List Control.Lens.Internal.Magma
    Control.Lens.Internal.Prism Control.Lens.Internal.Review
    Control.Lens.Internal.Setter Control.Lens.Internal.TH
    Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
    Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
    Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
    Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
    Control.Lens.Tuple Control.Lens.Type Control.Lens.Unsound
    Control.Lens.Wrapped Control.Lens.Zoom Control.Monad.Error.Lens
    Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
    Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    GHC.Generics.Lens System.Exit.Lens System.FilePath.Lens
    System.IO.Error.Lens Language.Haskell.TH.Lens Numeric.Lens
    Numeric.Natural.Lens
hidden-modules: Paths_lens
abi: 00c8c1b9617497da15c71148cdb1fea0
trusted: False
import-dirs: /home/agi/jampazen/.cabal-sandbox/lib/x86_64-linux-ghc-8.0.2/lens-4.17-3p8GTfrHbAd33kLZNs0goc
library-dirs: /home/agi/jampazen/.cabal-sandbox/lib/x86_64-linux-ghc-8.0.2/lens-4.17-3p8GTfrHbAd33kLZNs0goc
dynamic-library-dirs: /home/agi/jampazen/.cabal-sandbox/lib/x86_64-linux-ghc-8.0.2
data-dir: /home/agi/jampazen/.cabal-sandbox/share/x86_64-linux-ghc-8.0.2/lens-4.17
hs-libraries: HSlens-4.17-3p8GTfrHbAd33kLZNs0goc
depends:
    array-0.5.1.1 base-4.9.1.0 base-orphans-0.8-6JvLuSVTxjPFL40hWMjZFy
    bifunctors-5.5.3-HmjKdTIbDRL6N3DGbk30zI bytestring-0.10.8.1
    call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
    comonad-5.0.4-6ITJACFQdMP7JQd2L5vveM containers-0.5.7.1
    contravariant-1.5-1TVSrNRmanFB5XeOBDccHL
    distributive-0.6-4b2Cnv8NOkP1oRkumo5kEk
    exceptions-0.10.0-EO4JiUtMj6O3d9CJtpyp6n filepath-1.4.1.1
    free-5.1-4qQpBEUeh6h2nyVAVjcToJ ghc-prim-0.5.0.0
    hashable-1.2.7.0-7w9N2DqAkHMJpkvlPTtGAP
    kan-extensions-5.2-2cG6Fw3ApF0ABn7dWjOMeo
    mtl-2.2.2-IUStvhCM9Fb6Pb0KlPCV7h
    parallel-3.2.2.0-5FTNtQ1bv10JMH2BqrF0tZ
    profunctors-5.3-8xmEaZammCPEL7t2wHPYP6
    reflection-2.1.4-HSrK0imIkfBEn5cop8pAJt
    semigroupoids-5.3.2-5MqNq1efo1v9oiWcXdQ6Dz
    semigroups-0.18.5-8PX1z2jDBfU1S0Wcg8io0A
    tagged-0.8.6-2az2XizuL4n6MnioN5IYBR template-haskell-2.11.1.0
    text-1.2.3.1-7NKu8DECFYz7UjXy3rfbu5
    th-abstraction-0.2.10.0-IbqmuMs9frjBDPqWUjlObU transformers-0.5.2.0
    transformers-compat-0.6.2-A42QNCVU54L666iVXjX36W
    unordered-containers-0.2.10.0-20GsLEjselE1o0oRsP1LZx
    vector-0.12.0.2-FIqrhCUTzyP8eLNd3pskHY
    void-0.7.2-2kaNlnbmZo5LCwbtPDXIQb
haddock-interfaces: /home/agi/jampazen/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.0.2/lens-4.17/html/lens.haddock
haddock-html: /home/agi/jampazen/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.0.2/lens-4.17/html
